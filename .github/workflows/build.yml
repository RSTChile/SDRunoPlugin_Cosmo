name: Build Cosmo Plugin (Win32)

on:
  push:
    branches:
      - main
      - 'copilot/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-win32:
    runs-on: windows-latest
    env:
      CONFIG: Release
      PLATFORM: Win32
      ARTIFACT_DIR: artifacts
      DIST_DIR: installer\dist
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Ensure Nana lib (unzip if present)
        shell: pwsh
        run: |
          $zip = Join-Path $PWD "nana/build/bin/nana_v141_Release_x86.zip"
          if (Test-Path $zip) {
            Expand-Archive -Path $zip -DestinationPath (Split-Path $zip) -Force
            Write-Host "Extracted Nana library from zip"
          } else {
            Write-Host "No prebuilt Nana zip found. Continuing..."
          }

      - name: Build solution (Win32 Release, v143)
        shell: cmd
        run: >
          msbuild "SDRunoPlugin_Template.sln"
          /t:Build
          /p:Configuration=%CONFIG%
          /p:Platform=%PLATFORM%
          /p:PlatformToolset=v143
          /verbosity:minimal
          /maxcpucount

      - name: Collect build outputs
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path $env:ARTIFACT_DIR | Out-Null
          New-Item -ItemType Directory -Force -Path $env:DIST_DIR | Out-Null

          $candidates = @(
            Join-Path $PWD "$env:CONFIG",
            Join-Path $PWD "Win32/$env:CONFIG",
            Join-Path $PWD "x86/$env:CONFIG"
          ) | Where-Object { Test-Path $_ }

          $dlls = @()
          foreach ($d in $candidates) { $dlls += Get-ChildItem $d -Recurse -Filter *.dll -ErrorAction SilentlyContinue }

          if ($dlls.Count -eq 0) { throw "No DLLs found in expected output folders." }

          # Look for SDRunoPlugin_Template.dll first, then Cosmo.dll, then any dll
          $targetDll = $dlls | Where-Object { $_.Name -ieq 'SDRunoPlugin_Template.dll' } | Select-Object -First 1
          if ($null -eq $targetDll) { $targetDll = $dlls | Where-Object { $_.Name -ieq 'Cosmo.dll' } | Select-Object -First 1 }
          if ($null -eq $targetDll) { $targetDll = $dlls | Select-Object -First 1 }

          Write-Host "Found DLL: $($targetDll.FullName)"

          # Copy as Cosmo.dll for the plugin
          Copy-Item $targetDll.FullName -Destination (Join-Path $env:ARTIFACT_DIR "Cosmo.dll") -Force

          $pdb = Get-ChildItem $targetDll.Directory -Filter *.pdb -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($pdb) { Copy-Item $pdb.FullName -Destination (Join-Path $env:ARTIFACT_DIR $pdb.Name) -Force }

          Copy-Item (Join-Path $env:ARTIFACT_DIR "Cosmo.dll") -Destination (Join-Path $env:DIST_DIR "Cosmo.dll") -Force

      - name: Create ZIP package (manual install)
        shell: pwsh
        run: |
          $readme = Join-Path $PWD "packaging/README_INSTALL.txt"
          if (-not (Test-Path $readme)) {
            New-Item -ItemType Directory -Force -Path (Split-Path $readme) | Out-Null
            @"
            Manual installation instructions for Cosmo (SDRuno Plugin)
            1) Close SDRuno.
            2) Copy Cosmo.dll into: C:\Program Files (x86)\SDRplay\SDRuno\Plugins
            3) Start SDRuno and enable the plugin.
            "@ | Out-File -FilePath $readme -Encoding utf8 -Force
          }
          Copy-Item $readme -Destination (Join-Path $env:ARTIFACT_DIR "README_INSTALL.txt") -Force
          Compress-Archive -Path (Join-Path $env:ARTIFACT_DIR "Cosmo.dll"),(Join-Path $env:ARTIFACT_DIR "README_INSTALL.txt") -DestinationPath "Cosmo_Win32_Release.zip" -Force

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Cosmo-Win32-Release
          path: |
            artifacts/**
            Cosmo_Win32_Release.zip